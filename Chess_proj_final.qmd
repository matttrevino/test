---
project: Chess Opening Win Rates
type: website
output-dir: docs

website:
  title: "Matthew Trevino's ePortfolio"
  navbar:
    left:
      - href: index2.qmd
        text: "Home"
      - href: about2.qmd
        text: "About Me"
      - href: Chess-Project-Final/Chess_proj_final.qmd
        text: "Chess Openings and Victory Status"
        
format:
  html:
    theme: cosmo
    css: styles.css
    toc: true
    echo: false
editor: visual
---

```{r}
#| echo: false
library(tidyverse)
library(janitor)
library(ggformula)
library(readr)
library(dplyr)
library(stringr)
library(ggplot2)
chess <- read_csv("chess_games.csv")
```

To clean the data, I ensured that I would only analyze ranked games instead of casual and ranked games. Afterwards, I filtered the games based on opening and then mutated the variables to ensure that all the openings that include the text would be seen. This was to ensure that games with variations attached, like "Nimzo-Larsen Attack \_\_\_ Variation" would still be included under the Nimzo-Larsen Attack umbrella. I then summarized the variables I wanted into new data frames to analyze the research questions.

```{r}
#reading data in and checking stats, plus filtering by rated only
chess %>%
  count(opening_code)
n_distinct(chess$opening_code)
chess_rated <- chess %>% 
  filter(rated == "TRUE")

#listing openings to use
openings_of_interest <- c(
  "Slav Defense", "English Opening", "Queen's Gambit", "Ruy Lopez",
  "Italian Game", "Sicilian Defense", "Nimzo-Larsen Attack",
  "Scandinavian Defense", "French Defense", "Mieses Opening"
)

#ensuring all openings containing these names are used (since there are variations)
pattern <- paste(openings_of_interest, collapse = "|")
filtered_games <- chess_rated %>%
  filter(str_detect(opening_shortname, pattern)) %>%         # keep games with matching openings
  mutate(opening_shortname = case_when(
    str_detect(opening_shortname, "Nimzo-Larsen Attack") ~ "Nimzo-Larsen Attack",
    str_detect(opening_shortname, "Slav Defense") ~ "Slav Defense",
    str_detect(opening_shortname, "Sicilian Defense") ~ "Sicilian Defense",
    str_detect(opening_shortname, "English Opening") ~ "English Opening",
    str_detect(opening_shortname, "Queen's Gambit") ~ "Queen's Gambit",
    str_detect(opening_shortname, "Ruy Lopez") ~ "Ruy Lopez",
    str_detect(opening_shortname, "Italian Game") ~ "Italian Game",
    str_detect(opening_shortname, "Scandinavian Defense") ~ "Scandinavian Defense",
    str_detect(opening_shortname, "French Defense") ~ "French Defense",
    str_detect(opening_shortname, "Mieses Opening") ~ "Mieses Opening",
    TRUE ~ "Other"  
  ))

#summarizing win percentages into a model
win_summary <- filtered_games %>%
  filter(winner %in% c("White", "Black")) %>%
  group_by(opening_shortname, winner) %>%
  summarize(wins = n(), .groups = "drop") %>%
  group_by(opening_shortname) %>%
  mutate(total_games = sum(wins),
         win_percentage = wins / total_games * 100)
print(win_summary)
```

## Visualization 1

Here is a visualization of the win percentages of white and black based on opening choice. Opening choice is purely in white's control as they have first move, but black can still sway the game in some type of direction based on move responses. I chose to analyze some popular openings like the English, Ruy Lopez, and Sicilian Defense as well as less common openings like the Mieses Opening and Slav Defense. As we can see from the graph alone, white typically has winning advantage over black based on the data set I analyzed. The English, Ruy Lopez, and Queen's Gambit are 3 extremely popular openings for white, and each have a respectable win rate. The Mieses Opening is the one exception, with a large advantage for black, though this could be due to the low sample size, as well as the theory behind the Mieses Opening; it's not an opening that gives a direct advantage for white at the start of the game, so is typically avoided.

```{r}
#visualization of win color by opening chosen
ggplot(win_summary, aes(x = opening_shortname, y = win_percentage, fill = winner)) +
  geom_col(position = "dodge") +
  labs(x = "Opening Name", y = "Win Percentage", fill = "Winner Color",
       title = "Win Percentage by Opening and Color") +
  scale_fill_viridis_d() +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Visualization 2

This visualization shows the type of Victory Status by the turn count. In chess, each player takes turns making a move. Each time a player completes 1 move each, that counts as 1 turn. So when 1 turn happens, both players have made a single move. In this visualization, we see that Resign has the lowest number of turns, meaning that people who are resigning often are doing so relatively early on in the game. This may be due to a million factors, but is often due to feeling as though they cannot win the game due to a poor position, and disadvantage. Next is Mate, which is short for Checkmate. Checkmate is when a player's King can no longer make any legal move while simultaneously being attacked by a piece. This ends the game for the attacking player, who is declared victorious. Next, the variable Out of Time happens when a player loses because they did not make a move in time. Time formats are an extra factor in chess matches which add pressure to both players to perform quickly, or lose! Lastly, we see that games that end in draws often go on for very long. This is likely because games decided by draws often have far less pieces, therefore far less variables and possible outcomes on the chess board, and either end the game with just their king on the board, or perhaps one piece each where they realize that neither of them can actually win. Draws are also very common at higher ranks.

```{r}
#summary stats for the average turn count based on win condition  
turns_summary <- filtered_games %>%
  group_by(victory_status) %>%
  summarize(
    avg_turns = mean(turns, na.rm = TRUE),   # Average turns
    median_turns = median(turns, na.rm = TRUE),   # Median turns
    sd_turns = sd(turns, na.rm = TRUE),   # Standard deviation
    min_turns = min(turns, na.rm = TRUE),   # Minimum turns
    max_turns = max(turns, na.rm = TRUE),   # Maximum turns
    n = n(),   # Number of games (for each victory status)
    .groups = "drop"
  )
#reorder so they appear in ascending order in graph
turns_summary <- turns_summary %>%
  mutate(victory_status = fct_reorder(victory_status, avg_turns))

#make colors reflective of game status (draw = grey because boring)
status_colors <- c(
  "Draw" = "#999999",        
  "Mate" = "#1b9e77",         
  "Out of Time" = "#d95f02", 
  "Resign" = "#7570b3")

#create bar plot for average turn count by victory status
ggplot(turns_summary, aes(x = victory_status, y = avg_turns, fill = victory_status)) +
  geom_col(position = "dodge") +
  labs(
    x = "Victory Status",
    y = "Average Turn Count",
    title = "Turn Count by Victory Status") +
  scale_fill_manual(values = status_colors) +
  theme_minimal() 
```
